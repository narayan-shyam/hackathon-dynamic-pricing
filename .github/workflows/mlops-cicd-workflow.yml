name: MLOps CI/CD Pipeline (v1)

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  PYTHON_VERSION: '3.9'
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
  AZURE_ML_WORKSPACE: ${{ secrets.AZURE_ML_WORKSPACE }}
  MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
  API_APP_NAME: ${{ secrets.API_APP_NAME }}
  UI_APP_NAME: ${{ secrets.UI_APP_NAME }}
  APPINSIGHTS_INSTRUMENTATIONKEY: ${{ secrets.APPINSIGHTS_INSTRUMENTATIONKEY }}
  APPLICATIONINSIGHTS_CONNECTION_STRING: ${{ secrets.APPLICATIONINSIGHTS_CONNECTION_STRING }}
  AZURE_STORAGE_ACCOUNT: ${{ secrets.AZURE_STORAGE_ACCOUNT }}
  AZURE_STORAGE_KEY: ${{ secrets.AZURE_STORAGE_KEY }}
  DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
  DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
  DATABRICKS_NOTEBOOK_PATH: ${{ secrets.DATABRICKS_NOTEBOOK_PATH }}
  DATABRICKS_PREPROCESSING_NOTEBOOK_PATH: ${{ secrets.DATABRICKS_PREPROCESSING_NOTEBOOK_PATH }}
  MODEL_ARTIFACT_PATH: ${{ secrets.MODEL_ARTIFACT_PATH }}
  AZUREML_ENDPOINT_URL: ${{ secrets.AZUREML_ENDPOINT_URL }}

jobs:
  code-quality-and-tests:
    name: Code Quality & Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8 black isort mypy bandit

      - name: Lint with flake8
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Code formatting check (Black)
        run: black --check --diff . || echo "Code formatting issues found"

      - name: Import sorting check (isort)
        run: isort --check-only --diff . || echo "Import sorting issues found"

      - name: Type checking with mypy
        run: mypy --ignore-missing-imports api/ ui/ notebooks/

      # Run all tests using the comprehensive testing notebook
      # This notebook covers: Unit Tests, Integration Tests, and Smoke Tests
      - name: Run unit, integration, and smoke tests (notebooks/03_testing_framework.py)
        run: |
          coverage run --source=api,notebooks -m notebooks.03_testing_framework

      - name: Generate coverage report
        run: coverage report

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: .coverage

  data-preprocessing:
    name: Data Preprocessing (ADLS to Databricks)
    runs-on: ubuntu-latest
    needs: code-quality-and-tests
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          pip install azure-storage-blob databricks-cli
      - name: Deploy preprocessing scripts from repo to Databricks
        run: |
          python scripts/deploy_preprocessing_scripts_adls_to_databricks.py
      - name: Copy raw CSVs from ADLS to Databricks DBFS
        run: |
          python scripts/copy_raw_csvs_adls_to_databricks.py
          databricks fs cp raw_data/ dbfs:/tmp/raw_data/ --recursive --overwrite
      - name: Run Databricks Job for Data Preprocessing
        run: |
          databricks runs submit --notebook-path ${{ env.DATABRICKS_PREPROCESSING_NOTEBOOK_PATH }}
      - name: Upload processed datasets to ADLS processed folder
        run: |
          databricks fs cp dbfs:/tmp/processed_data/ processed_data/ --recursive --overwrite
          python scripts/upload_processed_datasets_to_adls.py

  train-model:
    name: Model Training & Validation (Databricks)
    runs-on: ubuntu-latest
    needs: data-preprocessing
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          pip install azure-storage-blob databricks-cli
      - name: Deploy notebooks from ADLS to Databricks
        run: |
          python scripts/deploy_notebooks_adls_to_databricks.py
      - name: Run Databricks Notebook for Training
        run: |
          databricks runs submit --notebook-path ${{ env.DATABRICKS_NOTEBOOK_PATH }}
      - name: Upload model artifact
        uses: actions/upload-artifact@v4
        with:
          name: trained-model
          path: |
            ${{ env.MODEL_ARTIFACT_PATH }}/model.pkl
            ${{ env.MODEL_ARTIFACT_PATH }}/feature_names.txt

  register-model:
    name: Register Model in MLflow & Azure ML
    runs-on: ubuntu-latest
    needs: train-model
    steps:
      - uses: actions/checkout@v4
      - name: Download model artifact
        uses: actions/download-artifact@v4
        with:
          name: trained-model
      - name: Set up Azure CLI
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}
          client-secret: ${{ env.AZURE_CLIENT_SECRET }}
      - name: Register model in Azure ML
        run: |
          az ml model create --name dynamic_pricing_model --path model.pkl --workspace-name $AZURE_ML_WORKSPACE --resource-group $AZURE_RESOURCE_GROUP
      - name: Register model in MLflow
        run: |
          pip install mlflow
          mlflow models register -m ./model.pkl -n dynamic_pricing_model

  blue-green-deploy:
    name: Blue-Green Deployment & Monitoring
    runs-on: ubuntu-latest
    needs: register-model
    steps:
      - uses: actions/checkout@v4
      - name: Set up Azure CLI
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}
          client-secret: ${{ env.AZURE_CLIENT_SECRET }}
      - name: Deploy new model version (Blue-Green)
        run: |
          az ml online-endpoint update --name dynamic-pricing-endpoint --deployment-target blue --model dynamic_pricing_model:latest --workspace-name $AZURE_ML_WORKSPACE --resource-group $AZURE_RESOURCE_GROUP
      - name: Run smoke test on blue deployment
        run: |
          curl -X POST "${{ env.AZUREML_ENDPOINT_URL }}" -H "Content-Type: application/json" -d '{"MRP":100,"NoPromoPrice":90,"SellingPrice":80,"CTR":0.02,"AbandonedCartRate":0.2,"BounceRate":0.3,"IsMetro":true,"month":6,"day":15,"dayofweek":3,"quarter":2,"competitor_price":85}'
      - name: Promote blue to green if healthy
        run: |
          az ml online-endpoint update --name dynamic-pricing-endpoint --deployment-target green --model dynamic_pricing_model:latest --workspace-name $AZURE_ML_WORKSPACE --resource-group $AZURE_RESOURCE_GROUP

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: blue-green-deploy
    if: failure()
    steps:
      - uses: actions/checkout@v4
      - name: Set up Azure CLI
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}
          client-secret: ${{ env.AZURE_CLIENT_SECRET }}
      - name: Find previous model version
        id: prevmodel
        run: |
          python scripts/find_previous_model_version.py
      - name: Rollback to previous model version
        if: env.PREV_VERSION != ''
        run: |
          az ml online-endpoint update --name dynamic-pricing-endpoint --deployment-target green --model dynamic_pricing_model:$PREV_VERSION --workspace-name $AZURE_ML_WORKSPACE --resource-group $AZURE_RESOURCE_GROUP
      - name: Fail if no previous version found
        if: env.PREV_VERSION == ''
        run: |
          echo "No previous model version found to rollback to."
          exit 1

  build-applications:
    name: Build API & UI Packages
    runs-on: ubuntu-latest
    needs: blue-green-deploy
    steps:
      - uses: actions/checkout@v4
      - name: Download model artifact
        uses: actions/download-artifact@v4
        with:
          name: trained-model
      - name: Build API package
        run: |
          mkdir -p deployment/api/models
          cp -r api/* deployment/api/
          cp model.pkl feature_names.txt deployment/api/models/
          cp api/requirements.txt deployment/api/
      - name: Build UI package
        run: |
          mkdir -p deployment/ui
          cp -r ui/* deployment/ui/
          cp ui/requirements.txt deployment/ui/
      - name: Create API deployment zip
        run: |
          cd deployment/api && zip -r ../api-package.zip .
      - name: Create UI deployment zip
        run: |
          cd deployment/ui && zip -r ../ui-package.zip .
      - name: Upload deployment packages
        uses: actions/upload-artifact@v4
        with:
          name: deployment-packages
          path: |
            deployment/api-package.zip
            deployment/ui-package.zip

#  Staging deployment job
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-applications
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Download deployment packages
      uses: actions/download-artifact@v3
      with:
        name: deployment-packages
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Deploy API to staging slot
      run: |
        # Create staging slot for API if it doesn't exist
        az webapp deployment slot create \
          --name ${{ env.API_APP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --slot staging || echo "Staging slot already exists"
        
        # Deploy API to staging slot
        az webapp deployment source config-zip \
          --name ${{ env.API_APP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --slot staging \
          --src api-package.zip
        
        # Configure staging app settings
        az webapp config appsettings set \
          --name ${{ env.API_APP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --slot staging \
          --settings \
            ENVIRONMENT=staging \
            MLFLOW_TRACKING_URI="${{ env.MLFLOW_TRACKING_URI }}" \
            AZURE_SUBSCRIPTION_ID="${{ env.AZURE_SUBSCRIPTION_ID }}" \
            WEBSITE_RUN_FROM_PACKAGE=1 \
            SCM_DO_BUILD_DURING_DEPLOYMENT=false
    
    - name: Deploy UI to staging slot
      run: |
        # Create staging slot for UI if it doesn't exist
        az webapp deployment slot create \
          --name ${{ env.UI_APP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --slot staging || echo "Staging slot already exists"
        
        # Deploy UI to staging slot
        az webapp deployment source config-zip \
          --name ${{ env.UI_APP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --slot staging \
          --src ui-package.zip
        
        # Configure staging app settings
        az webapp config appsettings set \
          --name ${{ env.UI_APP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --slot staging \
          --settings \
            ENVIRONMENT=staging \
            API_BASE_URL="https://${{ env.API_APP_NAME }}-staging.azurewebsites.net" \
            WEBSITE_RUN_FROM_PACKAGE=1 \
            SCM_DO_BUILD_DURING_DEPLOYMENT=false
    
    - name: Test staging deployments
      run: |
        # Wait for deployments to complete
        sleep 60
        
        # Test staging API health
        echo "Testing staging API..."
        API_URL="https://${{ env.API_APP_NAME }}-staging.azurewebsites.net"
        curl -f "$API_URL/health" || echo "Staging API health check failed"
        
        # Test staging UI health
        echo "Testing staging UI..."
        UI_URL="https://${{ env.UI_APP_NAME }}-staging.azurewebsites.net"
        curl -I "$UI_URL" || echo "Staging UI health check failed"
        
        echo "Staging URLs:"
        echo "API: $API_URL"
        echo "UI: $UI_URL"

  # Production deployment job
  deploy-production:
    name: Deploy API & UI to Azure App Service (Production)
    runs-on: ubuntu-latest
    needs: build-applications
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Download deployment packages
        uses: actions/download-artifact@v4
        with:
          name: deployment-packages
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Deploy API
        run: |
          az webapp deployment source config-zip \
            --name ${{ env.API_APP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --src deployment/api-package.zip
      - name: Deploy UI
        run: |
          az webapp deployment source config-zip \
            --name ${{ env.UI_APP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --src deployment/ui-package.zip
      - name: Set App Settings (API)
        run: |
          az webapp config appsettings set \
            --name ${{ env.API_APP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --settings APPINSIGHTS_INSTRUMENTATIONKEY="${{ env.APPINSIGHTS_INSTRUMENTATIONKEY }}" \
                       APPLICATIONINSIGHTS_CONNECTION_STRING="${{ env.APPLICATIONINSIGHTS_CONNECTION_STRING }}" \
                       AZUREML_ENDPOINT_URL="${{ env.AZUREML_ENDPOINT_URL }}"
      - name: Set App Settings (UI)
        run: |
          az webapp config appsettings set \
            --name ${{ env.UI_APP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --settings APPINSIGHTS_INSTRUMENTATIONKEY="${{ env.APPINSIGHTS_INSTRUMENTATIONKEY }}" \
                       APPLICATIONINSIGHTS_CONNECTION_STRING="${{ env.APPLICATIONINSIGHTS_CONNECTION_STRING }}"
      - name: Health Check API
        run: |
          az webapp config set \
            --name ${{ env.API_APP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --health-check-path "/health"
      - name: Health Check UI
        run: |
          az webapp config set \
            --name ${{ env.UI_APP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --health-check-path "/_stcore/health"
      - name: Test deployments
        run: |
          # Wait for deployments to complete
          sleep 60
          
          # Test API health
          echo "Testing API..."
          API_URL="https://${{ env.API_APP_NAME }}.azurewebsites.net"
          curl -f "$API_URL/health" || echo "API health check failed"
          
          # Test UI health
          echo "Testing UI..."
          UI_URL="https://${{ env.UI_APP_NAME }}.azurewebsites.net"
          curl -I "$UI_URL" || echo "UI health check failed"
          
          echo "URLs:"
          echo "API: $API_URL"
          echo "UI: $UI_URL"

  monitoring:
    name: Setup Monitoring & Auto-Scaling
    runs-on: ubuntu-latest
    needs: deploy-production
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Enable Application Insights (API)
        run: |
          az webapp config appsettings set \
            --name ${{ env.API_APP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --settings APPINSIGHTS_INSTRUMENTATIONKEY="${{ env.APPINSIGHTS_INSTRUMENTATIONKEY }}"
      - name: Enable Application Insights (UI)
        run: |
          az webapp config appsettings set \
            --name ${{ env.UI_APP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --settings APPINSIGHTS_INSTRUMENTATIONKEY="${{ env.APPINSIGHTS_INSTRUMENTATIONKEY }}"
      - name: Configure Auto-Scaling
        run: |
          az monitor autoscale create \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --resource ${{ env.API_APP_NAME }} \
            --resource-type Microsoft.Web/sites \
            --name "${{ env.API_APP_NAME }}-autoscale" \
            --min-count 1 \
            --max-count 5 \
            --count 1

          az monitor autoscale rule create \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --autoscale-name "${{ env.API_APP_NAME }}-autoscale" \
            --condition "Percentage CPU >= 70 avg 5m" \
            --scale out 1

          az monitor autoscale rule create \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --autoscale-name "${{ env.API_APP_NAME }}-autoscale" \
            --condition "Percentage CPU < 70 avg 5m" \
            --scale in 1

  notify-and-cleanup:
    runs-on: ubuntu-latest
    needs: [deploy-production, setup-monitoring]
    if: always()
    
    steps:
    - name: Notify deployment success
      if: needs.deploy-production.result == 'success'
      uses: actions/github-script@v6
      with:
        script: |
          const apiUrl = `https://${{ env.API_APP_NAME }}.azurewebsites.net`;
          const uiUrl = `https://${{ env.UI_APP_NAME }}.azurewebsites.net`;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `🚀 Production Deployment Successful - Build ${{ github.run_number }}`,
            body: `
            ## 🚀 Production Deployment to Azure App Services Completed!
            
            **Build:** ${{ github.run_number }}
            **Commit:** ${{ github.sha }}
            **Branch:** ${{ github.ref }}
            **Timestamp:** ${new Date().toISOString()}
            
            ### 🌐 Deployed Services:
            - **API Service:** [${apiUrl}](${apiUrl})
            - **UI Dashboard:** [${uiUrl}](${uiUrl})
            
            ### ✅ Deployment Summary:
            - ✅ Code quality checks passed
            - ✅ Model validation completed
            - ✅ API deployed to **${{ env.API_APP_NAME }}**
            - ✅ UI deployed to **${{ env.UI_APP_NAME }}**
            - ✅ Health checks configured
            - ✅ Application Insights enabled
            - ✅ Auto-scaling configured
            - ✅ Production smoke tests passed
            
            ### 🔗 Quick Links:
            - [API Health Check](${apiUrl}/health)
            - [API Documentation](${apiUrl}/docs)
            - [Model Information](${apiUrl}/model/info)
            - [UI Dashboard](${uiUrl})
            
            ### 📊 Monitoring:
            - Application Insights enabled for both services
            - Health monitoring active
            - Auto-scaling configured (1-5 instances)
            
            **The Dynamic Pricing ML system is now live and ready for use!**
            `,
            labels: ['deployment', 'production', 'success', 'azure-app-service']
          })
    
    - name: Notify deployment failure
      if: needs.deploy-production.result == 'failure'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `❌ Production Deployment Failed - Build ${{ github.run_number }}`,
            body: `
            ## ❌ Production Deployment to Azure App Services Failed
            
            **Build:** ${{ github.run_number }}
            **Commit:** ${{ github.sha }}
            **Branch:** ${{ github.ref }}
            **Timestamp:** ${new Date().toISOString()}
            
            The deployment to Azure App Services has failed. Please review the workflow logs for details.
            
            ### 🔍 Investigation Steps:
            1. Check workflow logs for specific error messages
            2. Verify Azure App Service health
            3. Check Azure resource group status
            4. Validate deployment packages
            5. Review App Service configuration
            
            ### 🛠️ Azure App Services:
            - **API:** ${{ env.API_APP_NAME }}
            - **UI:** ${{ env.UI_APP_NAME }}
            - **Resource Group:** ${{ env.AZURE_RESOURCE_GROUP }}
            
            [View Workflow Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            **Immediate action required to restore service.**
            `,
            labels: ['deployment', 'failure', 'urgent', 'azure-app-service']
          })
    
    - name: Cleanup artifacts
      run: |
        echo "Cleaning up deployment artifacts..."
        # Cleanup steps would go here
        echo "Cleanup completed"